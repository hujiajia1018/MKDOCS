{
    "config": {
        "lang": [
            "en"
        ], 
        "prebuild_index": false, 
        "separator": "[\\s\\-]+"
    }, 
    "docs": [
        {
            "location": "", 
            "text": "QFPAY API V3.2 Version History Version NO. Status Change description Change confirm Date QT1.1 Draft Original Draft Ver. 2018/01/16 QT1.2 Added Applet Payment 2018/02/07 QT1.3 Modified Official Account retrieve oauth_code, added scenarios description 2018/03/14 QT2.0 Added abroad payment type assistance/Time zone 2018/09/13 QT3.0 Add pay_tag field 2018/09/21 QT3.1 Add Order Remark API 2018/10/11 QT3.2 Reformat and update TOC 2018/10/24 QT3.3 Draft Add Value Added Services (VAS) API 2018/11/09 Note : Please review the 'Developer Instructions' carefully before working with QFPAY API, the Developer Instructions contains environment instruction, request signature method, request instruction, return signature verification, asynchronous notification etc. The calling methods for various payment functions under Alipay and WeChat Pay: Official Account, Applet, Service Window, QR Code, and Card are described in the body of the QFPAY API. Lastly, please review the 'API Instructions' for refund function call, query function etc.", 
            "title": "QFPAY API V3.2"
        }, 
        {
            "location": "API-Instructions/", 
            "text": "API Instructions # OrderPayment Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameter Required Description txamt Y Transaction Amount: 2 decimal places txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB pay_type Y Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system. openid N Alipay OpenID, need for Alipay Service Window pay sub_openid N WeChat OpenID, need for WeChat Official Account pay auth_code N Need for WeChat/Alipay Card Pay txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. return_url N Asynchronous notification address when order paid successfully limit_pay N In WeChat QR Pay or Official Account pay, used to limit credit card transaction. udid N Unique Device ID: length limited to 40 bytes. Response Parameters: Parameter Description syssn Order number on QFPAY side. out_trade_no External Order Number / Developer Platform Order Number. txamt Transaction Amount. txcurrcd Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY pay_type Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format) sysdtm System time qrcode Return during QR payment, QR Code URL; pay_params Parameter to call WeChat Official Account / Alipay Service Window: Payment: 800207 (WeChat Official Account payment) / 800107 (Alipay Service Window) Order Query # Note: Merchant should call query API to check the order status after created an order until QFPAY return with the order status . and handle according to the orderstatus. Mostly cannot query for the order that beyond month, or please input start_time, end_time (time section should include sysdtm , and should not beyond month) we suggest to take syssn as query condition. Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Order query API Request parameters: Parameters Required Description mchid Y Merchant ID, identification for merchant, assigned by QFPAY syssn N Query for Order number on QFPAY side, use \",\" to generate them if multiple exist out_trade_no N External Order Number / Developer Platform Order Number pay_type N Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) respcd N Response code of the order requests result, default is to return the respcd of all orders start_time N Start time,default set as Beginning of present month. Form: YYYY-MM-DD HH: MM: SS txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. page N Number or pages,default set as 1 page_size N Number of Item shown each page, default set as 10 Response Parameters: Parameter Description page Number of pages resperr Request result description page_size Number of Item shown each page, default set as 10 respcd Response Code: Code generated from order request. 0000 : SUCCESS data Order data shown as list , below is field description Data Fields: Field Description syssn Order number on QFPAY side out_trade_no External Order number,developer platform order number pay_type Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) order_type Order type: Pay order: Payment / Refund order: Refund / Close order: Close; txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). txamt Order payment amount,2 decimal places sysdtm Order time in system cancel recall/refund marking Normal order: 0; Recalled: 2; Refunded: 3 respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL errmsg Payment result description respcd internal of data shown 0000 as payment succeed, respcd external of data shown 0000 as order create succeed response sample: { respmsg : , resperr : \\\\u8bf7\\\\u6c42\\\\u6210\\\\u529f , respcd : 0000 , data : [{ pay_type : 800208 , sysdtm : 2018-01-12 17: 10: 26 , order_type : payment , txcurrcd : CNY , txdtm : 2018-01-12 17: 10: 32 , txamt : 1 , out_trade_no : 1301459478787530052 , syssn : 20180112000100020001659358 , cancel : 0 , respcd : 0000 , errmsg : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f }], page : 1, page_size : 10 } Order Refund # Note: initiate a refund order, merchants' amount of incoming payment should be greater than the amount of the refund, or it will fail. we suggest to make the refund no later than 30 days pass the syssn time of that original order. Basic request information: Request method Post under HTTP Request address /trade/v1/refund Description To make refund of a paid order Request parameters: Parameters Required Description syssn Y Order number on QFPAY side, the syssn of the original orders that need this refunding out_trade_no Y External Order number,developer platform order number,this parameter cannot be use repeatly each time successfully called payment(refund) API to make an order under the same Mchid,to make sure the trade number unique, length limited at 128 bytle txamt Y Transaction Amount txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format) mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. return_url N Asynchronous notification address when order paid successfully udid N Unique device ID Response parameters description: Parameter Description syssn Unique serial number for the refund orig_syssn The serial number of original order that make this refund txamt Order payment amount,2 decimal places txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). sysdtm Order time in system Response sample: { orig_syssn : 20180112000100020001659358 , sysdtm : 2018-01-12 19: 03: 23 , cardcd : , txdtm : 2018-01-12 19: 03: 29 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 13014597435743348787530052 , syssn : 20180112000100020001661542 , respcd : 0000 } Order Close # What status must an Order be in to close? a. If an QR Code payment or WeChat Official Account payment order is not paid successfully yet, it can be closed. We do not suggest closing a paid order because the standard of bank support for closing orders is inconsistent, which might cause failure of closing. b. If Card payment (Customer Payment code scan) is not paid successfully yet, it can be closed. c. If the close API is called after a successful payment, the paid money will be refunded because this action is a recall of API. What is the use case of close API? d. Only use it for open orders to avoid repeated payment. Do not use the close API instead of refund API because it might cause some unknown errors/ Basic request information: Request method Post under Http Request address /trade/v1/close Description Close order API Request Parameter: Parameter Required Description mchid Y Merchant ID, identification for merchant, assigned by QFPAY txamt Y Order payment amount,2 decimal places txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). syssn N Order number on QFPAY side, should submit at least one of syssn or out_trade_no out_trade_no N External order number,should submit at least one of syssn or out_trade_no txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8 udid N Unique device ID Response Parameters: Parameter Description syssn An unique order number generate by QFPAY when closing an order orig_syssn The serial number of original order that make this closing txamt Order payment amount,2 decimal places txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). sysdtm Order time in system Response sample: { orig_syssn : 20180112000100020001659801 , sysdtm : 2018-01-12 19: 07: 02 , cardcd : , txdtm : 2018-01-12 19: 07: 09 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , syssn : 20180112000100020001661611 , respcd : 0000 } Note : order closing is not generally supported and might be unavailable to close the order. It is not available to close the order if the return code is 1297 or syssn field absent the return parameters. Merchant can call refund API if the order is paid already. Order Remarks # Description : Add remarks to the order; does not support merchants with their own channel Basic request information : Request method Post under HTTP URL /trade/v1/add_note Description Add remarks to the order Request parameters: Parameters Required description code Y Code offered by QFPAY syssn Y Order number returned by QFPAY after successful transaction note Y Remark information, no longer than 200 bytes Response parameters: { resperr : , respcd : 0000 , respmsg : , data : {}} Bill Download # Note: the channel system will download the bills the second day and take day as Unit, it includes bill of every merchant. Only available on formal environment. Return as .zip file Basic request information: Request method Get under http Request address /download/v1/trade_bill Description Obtain Bill through the API, and save as .zip file Request parameters: Parameter Required Description trade_date Y Exact date of this bill . Sample: 2017-10-17", 
            "title": "API Instructions"
        }, 
        {
            "location": "API-Instructions/#api-instructions", 
            "text": "OrderPayment Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameter Required Description txamt Y Transaction Amount: 2 decimal places txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB pay_type Y Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system. openid N Alipay OpenID, need for Alipay Service Window pay sub_openid N WeChat OpenID, need for WeChat Official Account pay auth_code N Need for WeChat/Alipay Card Pay txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. return_url N Asynchronous notification address when order paid successfully limit_pay N In WeChat QR Pay or Official Account pay, used to limit credit card transaction. udid N Unique Device ID: length limited to 40 bytes. Response Parameters: Parameter Description syssn Order number on QFPAY side. out_trade_no External Order Number / Developer Platform Order Number. txamt Transaction Amount. txcurrcd Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY pay_type Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format) sysdtm System time qrcode Return during QR payment, QR Code URL; pay_params Parameter to call WeChat Official Account / Alipay Service Window: Payment: 800207 (WeChat Official Account payment) / 800107 (Alipay Service Window)", 
            "title": "API Instructions"
        }, 
        {
            "location": "API-Instructions/#order-query", 
            "text": "Note: Merchant should call query API to check the order status after created an order until QFPAY return with the order status . and handle according to the orderstatus. Mostly cannot query for the order that beyond month, or please input start_time, end_time (time section should include sysdtm , and should not beyond month) we suggest to take syssn as query condition. Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Order query API Request parameters: Parameters Required Description mchid Y Merchant ID, identification for merchant, assigned by QFPAY syssn N Query for Order number on QFPAY side, use \",\" to generate them if multiple exist out_trade_no N External Order Number / Developer Platform Order Number pay_type N Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) respcd N Response code of the order requests result, default is to return the respcd of all orders start_time N Start time,default set as Beginning of present month. Form: YYYY-MM-DD HH: MM: SS txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. page N Number or pages,default set as 1 page_size N Number of Item shown each page, default set as 10 Response Parameters: Parameter Description page Number of pages resperr Request result description page_size Number of Item shown each page, default set as 10 respcd Response Code: Code generated from order request. 0000 : SUCCESS data Order data shown as list , below is field description Data Fields: Field Description syssn Order number on QFPAY side out_trade_no External Order number,developer platform order number pay_type Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) order_type Order type: Pay order: Payment / Refund order: Refund / Close order: Close; txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). txamt Order payment amount,2 decimal places sysdtm Order time in system cancel recall/refund marking Normal order: 0; Recalled: 2; Refunded: 3 respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL errmsg Payment result description respcd internal of data shown 0000 as payment succeed, respcd external of data shown 0000 as order create succeed response sample: { respmsg : , resperr : \\\\u8bf7\\\\u6c42\\\\u6210\\\\u529f , respcd : 0000 , data : [{ pay_type : 800208 , sysdtm : 2018-01-12 17: 10: 26 , order_type : payment , txcurrcd : CNY , txdtm : 2018-01-12 17: 10: 32 , txamt : 1 , out_trade_no : 1301459478787530052 , syssn : 20180112000100020001659358 , cancel : 0 , respcd : 0000 , errmsg : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f }], page : 1, page_size : 10 }", 
            "title": "Order Query"
        }, 
        {
            "location": "API-Instructions/#order-refund", 
            "text": "Note: initiate a refund order, merchants' amount of incoming payment should be greater than the amount of the refund, or it will fail. we suggest to make the refund no later than 30 days pass the syssn time of that original order. Basic request information: Request method Post under HTTP Request address /trade/v1/refund Description To make refund of a paid order Request parameters: Parameters Required Description syssn Y Order number on QFPAY side, the syssn of the original orders that need this refunding out_trade_no Y External Order number,developer platform order number,this parameter cannot be use repeatly each time successfully called payment(refund) API to make an order under the same Mchid,to make sure the trade number unique, length limited at 128 bytle txamt Y Transaction Amount txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format) mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. return_url N Asynchronous notification address when order paid successfully udid N Unique device ID Response parameters description: Parameter Description syssn Unique serial number for the refund orig_syssn The serial number of original order that make this refund txamt Order payment amount,2 decimal places txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). sysdtm Order time in system Response sample: { orig_syssn : 20180112000100020001659358 , sysdtm : 2018-01-12 19: 03: 23 , cardcd : , txdtm : 2018-01-12 19: 03: 29 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 13014597435743348787530052 , syssn : 20180112000100020001661542 , respcd : 0000 }", 
            "title": "Order Refund"
        }, 
        {
            "location": "API-Instructions/#order-close", 
            "text": "What status must an Order be in to close? a. If an QR Code payment or WeChat Official Account payment order is not paid successfully yet, it can be closed. We do not suggest closing a paid order because the standard of bank support for closing orders is inconsistent, which might cause failure of closing. b. If Card payment (Customer Payment code scan) is not paid successfully yet, it can be closed. c. If the close API is called after a successful payment, the paid money will be refunded because this action is a recall of API. What is the use case of close API? d. Only use it for open orders to avoid repeated payment. Do not use the close API instead of refund API because it might cause some unknown errors/ Basic request information: Request method Post under Http Request address /trade/v1/close Description Close order API Request Parameter: Parameter Required Description mchid Y Merchant ID, identification for merchant, assigned by QFPAY txamt Y Order payment amount,2 decimal places txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). syssn N Order number on QFPAY side, should submit at least one of syssn or out_trade_no out_trade_no N External order number,should submit at least one of syssn or out_trade_no txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8 udid N Unique device ID Response Parameters: Parameter Description syssn An unique order number generate by QFPAY when closing an order orig_syssn The serial number of original order that make this closing txamt Order payment amount,2 decimal places txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). sysdtm Order time in system Response sample: { orig_syssn : 20180112000100020001659801 , sysdtm : 2018-01-12 19: 07: 02 , cardcd : , txdtm : 2018-01-12 19: 07: 09 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , syssn : 20180112000100020001661611 , respcd : 0000 } Note : order closing is not generally supported and might be unavailable to close the order. It is not available to close the order if the return code is 1297 or syssn field absent the return parameters. Merchant can call refund API if the order is paid already.", 
            "title": "Order Close"
        }, 
        {
            "location": "API-Instructions/#order-remarks", 
            "text": "Description : Add remarks to the order; does not support merchants with their own channel Basic request information : Request method Post under HTTP URL /trade/v1/add_note Description Add remarks to the order Request parameters: Parameters Required description code Y Code offered by QFPAY syssn Y Order number returned by QFPAY after successful transaction note Y Remark information, no longer than 200 bytes Response parameters: { resperr : , respcd : 0000 , respmsg : , data : {}}", 
            "title": "Order Remarks"
        }, 
        {
            "location": "API-Instructions/#bill-download", 
            "text": "Note: the channel system will download the bills the second day and take day as Unit, it includes bill of every merchant. Only available on formal environment. Return as .zip file Basic request information: Request method Get under http Request address /download/v1/trade_bill Description Obtain Bill through the API, and save as .zip file Request parameters: Parameter Required Description trade_date Y Exact date of this bill . Sample: 2017-10-17", 
            "title": "Bill Download"
        }, 
        {
            "location": "Value-added-services-api/", 
            "text": "Value Added Services API # CREATE ACTIVITY # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Create an activity. Example: Defined rules and activity to given out the red packets. Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Response id CHANGE ACTIVITY # Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Modify activity rule Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message ACTIVITY QUERY # Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Query list of defined activites Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message activities List of activities SHARE ACTIVITY # Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Share activities to others Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response parameters: Parameter Description share_url Shared url title Shared title icon_url Shared icon's url description Shared description id Red packet id source source mchnt_id Merchant id title title type Red packet type amt Red packet amount code Red packet code status Red packet status use_rule Use rule Content content ACTIVITY STATISTIC # Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Share activities to others Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response parameters: Parameter Description obtain_num Obtained number (activity or share) obtain_amt Obtained amount (activity or share) award_num Awarded number (activity or share) award_amt Awarded amount (activity or share) share_ids List of activities or shares CREATE COUPON RULES # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Create an coupon. Example: create red packet usage rules Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Response id CHANGE COUPON RULES # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Create an activity. Example: Defined rules and activity to given out the red packets. Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message QUERY COUPON RULES # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Query list of red packet's rules Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Red packet rule id src Source mchnt_id Merchant id title Red packet's rule title amt_max Maximum red packet amount amt_min Minimum red packet amount status Red packet rule's status use_rule Red packet rules content Content and description start_time Validity period expire_time Expired date and time USE COUPON # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Use red packet Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message ROLLBACK COUPON # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Rollback/cancel use of red packet (used when cancelled or void a transaction) Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period | Response| Parameters: | Parameter Description code Response code msg Response message DESTROY/DELETE COUPON # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Rollback/cancel use of red packet (used when cancelled or void a transaction) Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message COUPON RECORD QUERY # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Query red packet usages record Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Record id src source mchnt_id Merchant id customer_id Consumer id out_sn External unique identifier orig_out_sn Original unique identifier coupon_amt Red packet amount type Record type Content Content create_time Record create time SAMPLE MESSAGE # service QFMarketing { ​ // ================activity related interface================ ​ // create event ​ CreateResp activity_create(1:Activity activity); ​ // change activity ​ RespCode activity_change(1:Activity activity); ​ /** ​ * query activity ​ * src: source, mandatory field ​ * mchnt_id: merchant id, mandatory field，If it is empty, the activity created by the source is used, otherwise the activity created by the specified merchant is used ​ * activity_id: activity id, optional field，If not empty, query for the specified activity ​ * pos: position ​ * count: number of queries, =0, query start from pos provided ​ */ ​ ActivityList activity_query(1:string src, 2:string mchnt_id, 3:activity_id, 4:i32 pos, 5:i32 count); ​ /** ​ * activity shares ​ * src: source, mandatory field ​ * mchnt_id: merchant id, mandatory field，If it is empty, the activity created by the source is used, otherwise the activity created by the specified merchant is used * trade_amt: trade amount ​ * type: shares red packet type ​ */ ​ ActivityShare activity_share(1:string src, 2:string mchnt_id, 3:trade_amt, 4:i16 type); ​ /** ​ * share activities ​ * src: source, mandatory field ​ * activity_id: activity statistic id ​ * share_id: share statisc id. Share_id and activity_id only one can exist，if both exist，activity_id will be used */ ​ ActivityStat activity_stat(1:string src, 2:string activity_id, 3:share_id share_id); ​ // ================Red Packet Usage Rules Related Interface ================ ​ // create red packet usage rules ​ CreateResp coupon_rule_create(1:CouponRule coupon_rule); ​ // modify red packet usage rules ​ RespCode coupon_rule_change(1:CouponRule coupon_rule); ​ /** ​ * query red packet usage rules ​ * src: source, manatory field ​ * mchnt_id: merchant id, optional field，If it is empty, the activity created by the source is queried, otherwise the activity created by the specified merchant is queried * rule_id: rule id, optional field, if it is empty, query the specify red packet usage rules * pos: query possiton ​ * count: query count, if count =0, query start from pos number */ ​ CouponRuleList coupon_rule_query(1:string src, 2:string mchnt_id, 3:i32 rule_id, 4:i32 pos, 4:i32 count); // ================ red packet related interface ================ ​ /** * red packet usage src: source, mandatory field ​ * mchnt_id:merchant id, optional field，used when verifying red packet ​ * coupon_code: red packet code ​ * trade_amt: trade amount, verify if red packet can be used ​ */ RespCode coupon_use(1:string src, 2:string mchnt_id, 3:string coupon_code, 4:i32 trade_amt); /** * red packet rollback * src: source, mandatory field * customer_id: customer id * coupon_code:red packet code */ RespCode coupon_rollback(1:string src, 2:string customer_id, 3:string coupon_code); /** * destroy/void red packet * src: source, mandatory field * customer_id:customer id * coupon_code: red packet code */ RespCode coupon_destroy(1:string src, 2:string customer_id, 3:string coupon_code); /** ​ * red packet record query ​ * src: source, mandatory field ​ * mchnt_id: merchant id, optional field，If it is empty, the red packet usage record created by the query source or query the red packet use record created by the specified merchant ​ * begin_time: query start time ​ * end_time: query end time ​ * pos: query position ​ * count: query count, if count =0, query start from pos number ​ */ ​ CouponRecordList coupon_record_query(1:string src, 2:string mchnt_id, 3: start_time, 4:end_time, 5:i32 pos, 6:i32 count); }", 
            "title": "Value Added Services API"
        }, 
        {
            "location": "Value-added-services-api/#value-added-services-api", 
            "text": "", 
            "title": "Value Added Services API"
        }, 
        {
            "location": "Value-added-services-api/#create-activity", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Create an activity. Example: Defined rules and activity to given out the red packets. Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Response id", 
            "title": "CREATE ACTIVITY"
        }, 
        {
            "location": "Value-added-services-api/#change-activity", 
            "text": "Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Modify activity rule Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message", 
            "title": "CHANGE ACTIVITY"
        }, 
        {
            "location": "Value-added-services-api/#activity-query", 
            "text": "Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Query list of defined activites Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message activities List of activities", 
            "title": "ACTIVITY QUERY"
        }, 
        {
            "location": "Value-added-services-api/#share-activity", 
            "text": "Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Share activities to others Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response parameters: Parameter Description share_url Shared url title Shared title icon_url Shared icon's url description Shared description id Red packet id source source mchnt_id Merchant id title title type Red packet type amt Red packet amount code Red packet code status Red packet status use_rule Use rule Content content", 
            "title": "SHARE ACTIVITY"
        }, 
        {
            "location": "Value-added-services-api/#activity-statistic", 
            "text": "Basic request information: Request method Post or get under HTTP Request address /trade/v1/query Description Share activities to others Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response parameters: Parameter Description obtain_num Obtained number (activity or share) obtain_amt Obtained amount (activity or share) award_num Awarded number (activity or share) award_amt Awarded amount (activity or share) share_ids List of activities or shares", 
            "title": "ACTIVITY STATISTIC"
        }, 
        {
            "location": "Value-added-services-api/#create-coupon-rules", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Create an coupon. Example: create red packet usage rules Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Response id", 
            "title": "CREATE COUPON RULES"
        }, 
        {
            "location": "Value-added-services-api/#change-coupon-rules", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Create an activity. Example: Defined rules and activity to given out the red packets. Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message", 
            "title": "CHANGE COUPON RULES"
        }, 
        {
            "location": "Value-added-services-api/#query-coupon-rules", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Query list of red packet's rules Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Red packet rule id src Source mchnt_id Merchant id title Red packet's rule title amt_max Maximum red packet amount amt_min Minimum red packet amount status Red packet rule's status use_rule Red packet rules content Content and description start_time Validity period expire_time Expired date and time", 
            "title": "QUERY COUPON RULES"
        }, 
        {
            "location": "Value-added-services-api/#use-coupon", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Use red packet Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message", 
            "title": "USE COUPON"
        }, 
        {
            "location": "Value-added-services-api/#rollback-coupon", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Rollback/cancel use of red packet (used when cancelled or void a transaction) Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period | Response| Parameters: | Parameter Description code Response code msg Response message", 
            "title": "ROLLBACK COUPON"
        }, 
        {
            "location": "Value-added-services-api/#destroydelete-coupon", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Rollback/cancel use of red packet (used when cancelled or void a transaction) Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message", 
            "title": "DESTROY/DELETE COUPON"
        }, 
        {
            "location": "Value-added-services-api/#coupon-record-query", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Query red packet usages record Request parameters: Parameter Required Description id Y Source id mchnt_id Y Merchant id type Y Type of activity; 1 - Reduct title N Subject/Title of the activity total_amt N Activity amount (estimation) xx_type N Activity sharing type; 1 -- red packet obtain_num N Number of activities sharing for xx_type obtain_xx_id N Id for activity sharing for xx_type sponsor_award_num N Number of xx_type rewards sharers sponsor_xx_id N Activity reward sharer's xx_type id rule N Activity rule url N Activity url return_url N Activity callback URL ext N Activity extension information content N Activity contents used_num N Number of activity had been received used_amt N Amount received status N Activity status start_time N Start date and time of the activity period expire_time N Expire date and time of the activity period Response Parameters: Parameter Description code Response code msg Response message id Record id src source mchnt_id Merchant id customer_id Consumer id out_sn External unique identifier orig_out_sn Original unique identifier coupon_amt Red packet amount type Record type Content Content create_time Record create time", 
            "title": "COUPON RECORD QUERY"
        }, 
        {
            "location": "Value-added-services-api/#sample-message", 
            "text": "service QFMarketing { ​ // ================activity related interface================ ​ // create event ​ CreateResp activity_create(1:Activity activity); ​ // change activity ​ RespCode activity_change(1:Activity activity); ​ /** ​ * query activity ​ * src: source, mandatory field ​ * mchnt_id: merchant id, mandatory field，If it is empty, the activity created by the source is used, otherwise the activity created by the specified merchant is used ​ * activity_id: activity id, optional field，If not empty, query for the specified activity ​ * pos: position ​ * count: number of queries, =0, query start from pos provided ​ */ ​ ActivityList activity_query(1:string src, 2:string mchnt_id, 3:activity_id, 4:i32 pos, 5:i32 count); ​ /** ​ * activity shares ​ * src: source, mandatory field ​ * mchnt_id: merchant id, mandatory field，If it is empty, the activity created by the source is used, otherwise the activity created by the specified merchant is used * trade_amt: trade amount ​ * type: shares red packet type ​ */ ​ ActivityShare activity_share(1:string src, 2:string mchnt_id, 3:trade_amt, 4:i16 type); ​ /** ​ * share activities ​ * src: source, mandatory field ​ * activity_id: activity statistic id ​ * share_id: share statisc id. Share_id and activity_id only one can exist，if both exist，activity_id will be used */ ​ ActivityStat activity_stat(1:string src, 2:string activity_id, 3:share_id share_id); ​ // ================Red Packet Usage Rules Related Interface ================ ​ // create red packet usage rules ​ CreateResp coupon_rule_create(1:CouponRule coupon_rule); ​ // modify red packet usage rules ​ RespCode coupon_rule_change(1:CouponRule coupon_rule); ​ /** ​ * query red packet usage rules ​ * src: source, manatory field ​ * mchnt_id: merchant id, optional field，If it is empty, the activity created by the source is queried, otherwise the activity created by the specified merchant is queried * rule_id: rule id, optional field, if it is empty, query the specify red packet usage rules * pos: query possiton ​ * count: query count, if count =0, query start from pos number */ ​ CouponRuleList coupon_rule_query(1:string src, 2:string mchnt_id, 3:i32 rule_id, 4:i32 pos, 4:i32 count); // ================ red packet related interface ================ ​ /** * red packet usage src: source, mandatory field ​ * mchnt_id:merchant id, optional field，used when verifying red packet ​ * coupon_code: red packet code ​ * trade_amt: trade amount, verify if red packet can be used ​ */ RespCode coupon_use(1:string src, 2:string mchnt_id, 3:string coupon_code, 4:i32 trade_amt); /** * red packet rollback * src: source, mandatory field * customer_id: customer id * coupon_code:red packet code */ RespCode coupon_rollback(1:string src, 2:string customer_id, 3:string coupon_code); /** * destroy/void red packet * src: source, mandatory field * customer_id:customer id * coupon_code: red packet code */ RespCode coupon_destroy(1:string src, 2:string customer_id, 3:string coupon_code); /** ​ * red packet record query ​ * src: source, mandatory field ​ * mchnt_id: merchant id, optional field，If it is empty, the red packet usage record created by the query source or query the red packet use record created by the specified merchant ​ * begin_time: query start time ​ * end_time: query end time ​ * pos: query position ​ * count: query count, if count =0, query start from pos number ​ */ ​ CouponRecordList coupon_record_query(1:string src, 2:string mchnt_id, 3: start_time, 4:end_time, 5:i32 pos, 6:i32 count); }", 
            "title": "SAMPLE MESSAGE"
        }, 
        {
            "location": "alipay/", 
            "text": "Service Window | ALIPAY # Scenario: Customer can call Alipay payment in Alipay H5 webpage or Alipay service window, then enter password to pay. Obtain OpenID # Obtain user_id from oauth in Alipay production environment, please refer to: https: //docs.open.alipay.com/289/105656 3 Request Payment API # Basic request information: Request method Post under Http Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameter Required Description txamt Y Transaction Amount: 2 decimal places txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB pay_type Y Pay type: Alipay Service Window (800107) out_trade_no Y External Order number,developer platform order number,this parameter cannot be use repeatedly each time successfully called payment(refund) API to make an order under the same Mchid,to make sure the trade number unique, length limited at 128 bytes openid Y user_id obtained during the former process Sample: 2088802811715388 goods_name Y Goods name or marking, suggest not to exceed 20 alphanumeric and doesn't contain special character mchid Y Merchant ID, identification for merchant,assigned by QFPAY(to distinguish the different merchants' order in channel system). txzone N Time zone,to record the domestic order time, default time zone is Beijing time+0800 return_url N Asynchronous notification address when order paid successfully limit_pay N Use to limit credit card transaction udid N Unique device id Response parameters: Parameters Description pay_type Pay type Alipay service window pay: 800107 sysdtm System time txdtm Order time Form: YYYY-MM-DD HH: MM: SS resperr Response description txcurrcd Currency Hongkong Dollar: HKD ; China Yuan: CNY txamt Order payment amount,2 decimal places respmsg Debug information out_trade_no External Order number,developer platform order number syssn Order number on QFPAY side respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL pay_params Parameter that initiates Alipay, please refer to the below pay_params Sample of how to find pay_params { pay_type : 800107 , sysdtm : 2018-01-11 18: 44: 59 , cardcd : , txdtm : 2018-01-11 18: 45: 03 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 130145478743444389767778530052 , syssn : 20180111000100020001649385 , respcd : 0000 , pay_params : { tradeNO : 2018011121001004380248132360 } } Call Cashier Pay # Call Alipay on webpage, please refer to: https: //docs.open.alipay.com/common/105591 Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Service Window ALIPAY"
        }, 
        {
            "location": "alipay/#service-window-124-alipay", 
            "text": "Scenario: Customer can call Alipay payment in Alipay H5 webpage or Alipay service window, then enter password to pay.", 
            "title": "Service Window | ALIPAY"
        }, 
        {
            "location": "alipay/#obtain-openid", 
            "text": "Obtain user_id from oauth in Alipay production environment, please refer to: https: //docs.open.alipay.com/289/105656", 
            "title": "Obtain OpenID"
        }, 
        {
            "location": "alipay/#3-request-payment-api", 
            "text": "Basic request information: Request method Post under Http Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameter Required Description txamt Y Transaction Amount: 2 decimal places txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB pay_type Y Pay type: Alipay Service Window (800107) out_trade_no Y External Order number,developer platform order number,this parameter cannot be use repeatedly each time successfully called payment(refund) API to make an order under the same Mchid,to make sure the trade number unique, length limited at 128 bytes openid Y user_id obtained during the former process Sample: 2088802811715388 goods_name Y Goods name or marking, suggest not to exceed 20 alphanumeric and doesn't contain special character mchid Y Merchant ID, identification for merchant,assigned by QFPAY(to distinguish the different merchants' order in channel system). txzone N Time zone,to record the domestic order time, default time zone is Beijing time+0800 return_url N Asynchronous notification address when order paid successfully limit_pay N Use to limit credit card transaction udid N Unique device id Response parameters: Parameters Description pay_type Pay type Alipay service window pay: 800107 sysdtm System time txdtm Order time Form: YYYY-MM-DD HH: MM: SS resperr Response description txcurrcd Currency Hongkong Dollar: HKD ; China Yuan: CNY txamt Order payment amount,2 decimal places respmsg Debug information out_trade_no External Order number,developer platform order number syssn Order number on QFPAY side respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL pay_params Parameter that initiates Alipay, please refer to the below pay_params Sample of how to find pay_params { pay_type : 800107 , sysdtm : 2018-01-11 18: 44: 59 , cardcd : , txdtm : 2018-01-11 18: 45: 03 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 130145478743444389767778530052 , syssn : 20180111000100020001649385 , respcd : 0000 , pay_params : { tradeNO : 2018011121001004380248132360 } }", 
            "title": "3 Request Payment API"
        }, 
        {
            "location": "alipay/#call-cashier-pay", 
            "text": "Call Alipay on webpage, please refer to: https: //docs.open.alipay.com/common/105591 Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Call Cashier Pay"
        }, 
        {
            "location": "app-pay/", 
            "text": "APP Pay # Scenario：This payment scenario supports payment in the proprietary business logic of independently developed iOS and Android applications，Obtain payment parameters through payment API，and call Alipay HK/Wechat Pay HK wallet to pay，Confirm payment results and complete business process after successful payment. Basic request information： Request method Post under HTTP Request address /trade/v1/payment Description Call the payment API Request parameters： Parameter Required Description txamt Y Order payment amount,2 decimal places; txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / US Dollar: USD / pay_type Y Payment Type： 801010 WeixinHK APP Payment；801510 AlipayHK APP Payment； out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. goods_info N Neccessary for AlipayHK APP Pay; item description, Cannot exceed 300 alphanumeric or contain special characters. mchid N Neccessary when have sub-merchants； Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system. pay_tag N This parameter is a pay mark that supports Mainland wallet cross-border payment. It is required when doing Alipay HK payment, and set field Value as ALIPAYHK or ALIPAYCN,ALIPAYHK means Alipay HK wallet payment. ALIPAYCN means Mainland wallet aboard payment, field default value is ALIPAYHK. return_url N Asynchronous notification address when order paid successfully. txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. udid N Unique device id Response Parameters： Parameter Description syssn Order Number: QFPAY generated. out_trade_no External Order Number / Developer Platform Order Number. txamt Order payment amount,2 decimal places; txcurrcd Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY pay_type Payment Type： 801010 WeixinHK APP Payment；801510 AlipayHK APP Payment； txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). sysdtm System time respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL respmsg Response Message: Used for debugging. resperr Response Error: Error description. pay_params Payment Parameters: initiates WeChat Pay Response parameters（AlipayHK APP）： { syssn : 20180904016100020000058497 , out_trade_no : 1018172042-1226 , txamt : 1 , txcurrcd : HKD , pay_type : 801510 , txdtm : 2018-09-04 19:00:00 , sysdtm : 2018-09-04 20:30:18 , udid : qiantai2 , respcd : 0000 , respmsg : , resperr : \\u4ea4\\u6613\\u6210\\u529f , chnlsn : , pay_params : { partner : 2088621909478475 , seller_id : forex_318255@alitest.com , subject : goods_name , body : goods_info , total_fee : 0.01 , notify_url : http://www.xxx.com , service : mobile.securitypay.pay , cardcd : , payment_type : 1 , _input_charset : UTF-8 , it_b_pay : 30m , return_url : http://www.qfpay.com/ , payment_inst : ALIPAYHK , currency : HKD , product_code : NEW_WAP_OVERSEAS_SELLER , forex_biz : FP , sign : AXwqha79D%2BdnJvN4qyIk6wrintWXMFL3DNvIsJ9wmoBVkhWdE1jWb%2Fn7gWwcEPJkxrmgE%2BSLaPOo9mTemDzDgt99tJ4yPL%2B%2FFLiT78e5xCyZKOdPLcKnZ2fAKaiBTca43m5J6GE%2B8ybu56fRLw0hI8oWSxiJzY54MxwDGbE4QoQ%3D , sign_type : RSA , secondary_merchant_id : 2325496 , secondary_merchant_name : shusheng , secondary_merchant_industry : 5311 } } Response sample（WeixinHK APP）： { syssn : 20181018016100020000064335 , out_trade_no : 1018171240-6683 , txamt : 1 , txcurrcd : HKD , pay_type : 801010 , txdtm : 2018-10-18 17:12:40 , sysdtm : 2018-10-18 17:12:41 , udid : qiantai2 , respcd : 0000 , respmsg : OK , resperr : \\u4ea4\\u6613\\u6210\\u529f\\uff01 , cardcd : , pay_params : { prepayid : 415398539638736726430369036811 , sign : 89D5D3346DCD0C5F848C4ADFA8F2E70D }, chnlsn : } Call Payment： APP will call Alipay HK SDK or Wechat Pay SDK with the parameter in pay_params after receive the response parameters, please refer to the official document below. AlipayHK： https://global.alipay.com/service/app_hk/6 Response parameters pay_params field in response parameters（AlipayHK APP）： { partner : 2088621909478475 , seller_id : forex_318255@alitest.com , out_trade_no : 20180904016100020000058497 , subject : goods_name , body : goods_info , total_fee : 0.01 , notify_url : http://www.xxx.com , service : mobile.securitypay.pay , payment_type : 1 , _input_charset : UTF-8 , it_b_pay : 30m , return_url : http://www.qfpay.com/ , payment_inst : ALIPAYHK , currency : HKD , product_code : NEW_WAP_OVERSEAS_SELLER , forex_biz : FP , sign : AXwqha79D%2BdnJvN4qyIk6wrintWXMFL3DNvIsJ9wmoBVkhWdE1jWb%2Fn7gWwcEPJkxrmgE%2BSLaPOo9mTemDzDgt99tJ4yPL%2B%2FFLiT78e5xCyZKOdPLcKnZ2fAKaiBTca43m5J6GE%2B8ybu56fRLw0hI8oWSxiJzY54MxwDGbE4QoQ%3D , sign_type : RSA , secondary_merchant_id : 2325496 , secondary_merchant_name : shusheng , secondary_merchant_industry : 5311 } pay_params field in response parameters（WeixinHK APP）： { prepayid : 415398539638736726430369036811 , sign : 89D5D3346DCD0C5F848C4ADFA8F2E70D } Python Request Sample： #!/usr/bin/env python #coding=utf8 **import** urllib, urllib2, hashlib unicode_to_utf8 = **lambda** s: s.encode('utf-8') **if** isinstance(s, unicode) **else** s # request signature data as data dictionary **def** **make_req_sign**(data, key): ​ keys = data.keys() ​ keys.sort() ​ p = [] ​ **for** k **in** keys: ​ k = unicode_to_utf8(k) ​ v = unicode_to_utf8(data[k]) ​ p.append('%s=%s'%(k,v)) ​ unsign_str = ' '.join(p) + unicode_to_utf8(key) ​ s = hashlib.md5(unsign_str).hexdigest() ​ **return** s.upper() txamt = '1' txcurrcd = ‘HKD’ pay_type = '801510' out_trade_no = '145399626053599943' txdtm = '2018-09-10 11:51:00' goods_name = 'QFPAY test goods_name' goods_info = 'QFPAY test goods_info' mchid = 'P5W2di7Raa' return_url = 'http://www.qfpay.com/' seller_id = 'forex_318255@alitest.com' key = 'app_key assigned by QFPAY' data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name':goods_name, 'goods_info ': goods_info, 'mchid': mchid, 'return_url ': return_url, 'seller_id ': seller_id} req = urllib2.Request('https://openapi-test.qfpay.com/trade/v1/payment',urllib.urlencode(data)) req.add_header('X-QF-APPCODE', 'app_code assigned by QFPAY') req.add_header('X-QF-SIGN', make_req_sign(data, key)) resp = urllib2.urlopen(req) **print** resp.read() Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "APP PAY"
        }, 
        {
            "location": "app-pay/#app-pay", 
            "text": "Scenario：This payment scenario supports payment in the proprietary business logic of independently developed iOS and Android applications，Obtain payment parameters through payment API，and call Alipay HK/Wechat Pay HK wallet to pay，Confirm payment results and complete business process after successful payment. Basic request information： Request method Post under HTTP Request address /trade/v1/payment Description Call the payment API Request parameters： Parameter Required Description txamt Y Order payment amount,2 decimal places; txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / US Dollar: USD / pay_type Y Payment Type： 801010 WeixinHK APP Payment；801510 AlipayHK APP Payment； out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. goods_info N Neccessary for AlipayHK APP Pay; item description, Cannot exceed 300 alphanumeric or contain special characters. mchid N Neccessary when have sub-merchants； Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system. pay_tag N This parameter is a pay mark that supports Mainland wallet cross-border payment. It is required when doing Alipay HK payment, and set field Value as ALIPAYHK or ALIPAYCN,ALIPAYHK means Alipay HK wallet payment. ALIPAYCN means Mainland wallet aboard payment, field default value is ALIPAYHK. return_url N Asynchronous notification address when order paid successfully. txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. udid N Unique device id Response Parameters： Parameter Description syssn Order Number: QFPAY generated. out_trade_no External Order Number / Developer Platform Order Number. txamt Order payment amount,2 decimal places; txcurrcd Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY pay_type Payment Type： 801010 WeixinHK APP Payment；801510 AlipayHK APP Payment； txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). sysdtm System time respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL respmsg Response Message: Used for debugging. resperr Response Error: Error description. pay_params Payment Parameters: initiates WeChat Pay Response parameters（AlipayHK APP）： { syssn : 20180904016100020000058497 , out_trade_no : 1018172042-1226 , txamt : 1 , txcurrcd : HKD , pay_type : 801510 , txdtm : 2018-09-04 19:00:00 , sysdtm : 2018-09-04 20:30:18 , udid : qiantai2 , respcd : 0000 , respmsg : , resperr : \\u4ea4\\u6613\\u6210\\u529f , chnlsn : , pay_params : { partner : 2088621909478475 , seller_id : forex_318255@alitest.com , subject : goods_name , body : goods_info , total_fee : 0.01 , notify_url : http://www.xxx.com , service : mobile.securitypay.pay , cardcd : , payment_type : 1 , _input_charset : UTF-8 , it_b_pay : 30m , return_url : http://www.qfpay.com/ , payment_inst : ALIPAYHK , currency : HKD , product_code : NEW_WAP_OVERSEAS_SELLER , forex_biz : FP , sign : AXwqha79D%2BdnJvN4qyIk6wrintWXMFL3DNvIsJ9wmoBVkhWdE1jWb%2Fn7gWwcEPJkxrmgE%2BSLaPOo9mTemDzDgt99tJ4yPL%2B%2FFLiT78e5xCyZKOdPLcKnZ2fAKaiBTca43m5J6GE%2B8ybu56fRLw0hI8oWSxiJzY54MxwDGbE4QoQ%3D , sign_type : RSA , secondary_merchant_id : 2325496 , secondary_merchant_name : shusheng , secondary_merchant_industry : 5311 } } Response sample（WeixinHK APP）： { syssn : 20181018016100020000064335 , out_trade_no : 1018171240-6683 , txamt : 1 , txcurrcd : HKD , pay_type : 801010 , txdtm : 2018-10-18 17:12:40 , sysdtm : 2018-10-18 17:12:41 , udid : qiantai2 , respcd : 0000 , respmsg : OK , resperr : \\u4ea4\\u6613\\u6210\\u529f\\uff01 , cardcd : , pay_params : { prepayid : 415398539638736726430369036811 , sign : 89D5D3346DCD0C5F848C4ADFA8F2E70D }, chnlsn : } Call Payment： APP will call Alipay HK SDK or Wechat Pay SDK with the parameter in pay_params after receive the response parameters, please refer to the official document below. AlipayHK： https://global.alipay.com/service/app_hk/6 Response parameters pay_params field in response parameters（AlipayHK APP）： { partner : 2088621909478475 , seller_id : forex_318255@alitest.com , out_trade_no : 20180904016100020000058497 , subject : goods_name , body : goods_info , total_fee : 0.01 , notify_url : http://www.xxx.com , service : mobile.securitypay.pay , payment_type : 1 , _input_charset : UTF-8 , it_b_pay : 30m , return_url : http://www.qfpay.com/ , payment_inst : ALIPAYHK , currency : HKD , product_code : NEW_WAP_OVERSEAS_SELLER , forex_biz : FP , sign : AXwqha79D%2BdnJvN4qyIk6wrintWXMFL3DNvIsJ9wmoBVkhWdE1jWb%2Fn7gWwcEPJkxrmgE%2BSLaPOo9mTemDzDgt99tJ4yPL%2B%2FFLiT78e5xCyZKOdPLcKnZ2fAKaiBTca43m5J6GE%2B8ybu56fRLw0hI8oWSxiJzY54MxwDGbE4QoQ%3D , sign_type : RSA , secondary_merchant_id : 2325496 , secondary_merchant_name : shusheng , secondary_merchant_industry : 5311 } pay_params field in response parameters（WeixinHK APP）： { prepayid : 415398539638736726430369036811 , sign : 89D5D3346DCD0C5F848C4ADFA8F2E70D } Python Request Sample： #!/usr/bin/env python #coding=utf8 **import** urllib, urllib2, hashlib unicode_to_utf8 = **lambda** s: s.encode('utf-8') **if** isinstance(s, unicode) **else** s # request signature data as data dictionary **def** **make_req_sign**(data, key): ​ keys = data.keys() ​ keys.sort() ​ p = [] ​ **for** k **in** keys: ​ k = unicode_to_utf8(k) ​ v = unicode_to_utf8(data[k]) ​ p.append('%s=%s'%(k,v)) ​ unsign_str = ' '.join(p) + unicode_to_utf8(key) ​ s = hashlib.md5(unsign_str).hexdigest() ​ **return** s.upper() txamt = '1' txcurrcd = ‘HKD’ pay_type = '801510' out_trade_no = '145399626053599943' txdtm = '2018-09-10 11:51:00' goods_name = 'QFPAY test goods_name' goods_info = 'QFPAY test goods_info' mchid = 'P5W2di7Raa' return_url = 'http://www.qfpay.com/' seller_id = 'forex_318255@alitest.com' key = 'app_key assigned by QFPAY' data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name':goods_name, 'goods_info ': goods_info, 'mchid': mchid, 'return_url ': return_url, 'seller_id ': seller_id} req = urllib2.Request('https://openapi-test.qfpay.com/trade/v1/payment',urllib.urlencode(data)) req.add_header('X-QF-APPCODE', 'app_code assigned by QFPAY') req.add_header('X-QF-SIGN', make_req_sign(data, key)) resp = urllib2.urlopen(req) **print** resp.read() Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "APP Pay"
        }, 
        {
            "location": "card-pay/", 
            "text": "Card | WECHAT / ALIPAY # Description: Consumer-Presented Mode (Merchant scans Consumer's WeChat or Alipay payment code to obtain auth_code (payment authorization code) and collects payment from consumer. Request Payment API # Basic request information: Request method Post under http Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameter Required Description txamt Y Order payment amount,2 decimal places txcurrcd Y Currency Hongkong Dollar: HKD ; China Yuan: CNY; Japan Yen: JPY; US Dollar: USD; Dirham: AED; Thai Baht: THB; pay_type Y Pay type WeChat Card Pay: 800208; Alipay Card Pay: 800108; WeChat/Alipay Card Pay: 800008; AIRPAY: 801408; LINE PAY: 801208; UNIONPAY: 800708; out_trade_no Y External Order number,developer platform order number. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format) auth_code Y Authorization assigned by WeChat or Alipay goods_name Y Goods name or marking mchid Y Merchant ID, identification for merchant,assigned by QFPAY(to distinguish the different merchants' order in channel system). txzone N Time zone,to record the domestic order time, default time zone is Beijing time+0800 return_url N Asynchronous notification address when order paid successfully udid N Unique device ID Python request sample: #!/usr/bin/env python #coding=utf8 import urllib, urllib2, hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # request signature data as data dictionary def make_req_sign(data, key): keys = data.keys() keys.sort() p = [] for k in keys: k = unicode_to_utf8(k) v = unicode_to_utf8(data[k]) p.append('%s=%s'%(k,v)) unsign_str = ' '.join(p) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() txamt = '1' txcurrcd = 'CNY' pay_type = '800208' out_trade_no = '145399626053599943' txdtm = '2016-04-11 17: 51: 00' goods_name = 'testing' udid = '1880105' auth_code='130700033456383187' key = 'app_key assigned by QFPAY' data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name,'udid': udid,'auth_code': auth_code} req = urllib2.Request('https: //openapi-test.qfpay.com/trade/v1/payment',urllib.urlencode(data)) req.add_header('X-QF-APPCODE', 'app_code assigned by QFPAY') req.add_header('X-QF-SIGN', make_req_sign(data, key)) resp = urllib2.urlopen(req) print resp.read() Response parameters: Parameters Description pay_type Payment Type: 800208 (WeChat Card) / 800108 (Alipay Card) sysdtm System time txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format) resperr Response description txcurrcd Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY txamt Transaction Amount: 2 decimal places respmsg Debug information out_trade_no External Order number, developer platform order number. syssn Order number on QFPAY side respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL Note: card payment request API initiates the collecting of payment from customer, the parameter respcd shows the result of payment, we suggest merchant continue calling query API to check the payment result if respcd shows 1143,1145. Or to re-submit an order if the status stays in 1143,1145 for too long Response sample: { pay_type : 800208 , sysdtm : 2018-01-12 17: 10: 26 , cardcd : oo3Lss-DzPSygtHtAbfuXeQFCz18 , txdtm : 2018-01-12 17: 10: 32 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 1301459478787530052 , syssn : 20180112000100020001659358 , respcd : 0000 } Note : this request return result is the customers payment's return result Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Card WECHAT ALIPAY"
        }, 
        {
            "location": "card-pay/#card-124-wechat-alipay", 
            "text": "Description: Consumer-Presented Mode (Merchant scans Consumer's WeChat or Alipay payment code to obtain auth_code (payment authorization code) and collects payment from consumer.", 
            "title": "Card | WECHAT / ALIPAY"
        }, 
        {
            "location": "card-pay/#request-payment-api", 
            "text": "Basic request information: Request method Post under http Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameter Required Description txamt Y Order payment amount,2 decimal places txcurrcd Y Currency Hongkong Dollar: HKD ; China Yuan: CNY; Japan Yen: JPY; US Dollar: USD; Dirham: AED; Thai Baht: THB; pay_type Y Pay type WeChat Card Pay: 800208; Alipay Card Pay: 800108; WeChat/Alipay Card Pay: 800008; AIRPAY: 801408; LINE PAY: 801208; UNIONPAY: 800708; out_trade_no Y External Order number,developer platform order number. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format) auth_code Y Authorization assigned by WeChat or Alipay goods_name Y Goods name or marking mchid Y Merchant ID, identification for merchant,assigned by QFPAY(to distinguish the different merchants' order in channel system). txzone N Time zone,to record the domestic order time, default time zone is Beijing time+0800 return_url N Asynchronous notification address when order paid successfully udid N Unique device ID Python request sample: #!/usr/bin/env python #coding=utf8 import urllib, urllib2, hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # request signature data as data dictionary def make_req_sign(data, key): keys = data.keys() keys.sort() p = [] for k in keys: k = unicode_to_utf8(k) v = unicode_to_utf8(data[k]) p.append('%s=%s'%(k,v)) unsign_str = ' '.join(p) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() txamt = '1' txcurrcd = 'CNY' pay_type = '800208' out_trade_no = '145399626053599943' txdtm = '2016-04-11 17: 51: 00' goods_name = 'testing' udid = '1880105' auth_code='130700033456383187' key = 'app_key assigned by QFPAY' data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name,'udid': udid,'auth_code': auth_code} req = urllib2.Request('https: //openapi-test.qfpay.com/trade/v1/payment',urllib.urlencode(data)) req.add_header('X-QF-APPCODE', 'app_code assigned by QFPAY') req.add_header('X-QF-SIGN', make_req_sign(data, key)) resp = urllib2.urlopen(req) print resp.read() Response parameters: Parameters Description pay_type Payment Type: 800208 (WeChat Card) / 800108 (Alipay Card) sysdtm System time txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format) resperr Response description txcurrcd Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY txamt Transaction Amount: 2 decimal places respmsg Debug information out_trade_no External Order number, developer platform order number. syssn Order number on QFPAY side respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL Note: card payment request API initiates the collecting of payment from customer, the parameter respcd shows the result of payment, we suggest merchant continue calling query API to check the payment result if respcd shows 1143,1145. Or to re-submit an order if the status stays in 1143,1145 for too long Response sample: { pay_type : 800208 , sysdtm : 2018-01-12 17: 10: 26 , cardcd : oo3Lss-DzPSygtHtAbfuXeQFCz18 , txdtm : 2018-01-12 17: 10: 32 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 1301459478787530052 , syssn : 20180112000100020001659358 , respcd : 0000 } Note : this request return result is the customers payment's return result Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Request Payment API"
        }, 
        {
            "location": "developer/", 
            "text": "Developer Instructions # Environment Description # There're two environments of QFPAY API Test environment: for testing with the code and key. Official environment: for business use. To test code and key without settlement. Please test with small amount. MCHID can be found in channel system. The channel system entrance will be provided to merchants after applying the formal code and key. Every channel has its unique code and key, sub-merchants can use the same code and key. API requesting URL: Test environment: https: //openapi-test.qfpay.com Formal environment: https://openapi.qfpay.com Support API list: API instruction: API address: API description Request method description Order Payment /trade/v1/payment Call payment API,for placing order or initiate payment Post or Get under Http( form submission) Order query /trade/v1/query Query order information,for success order Post or Get under Http Order refund /trade/v1/refund For refund Post under Http Order close /tarde/v1/close Close order Post under Http Encoding Description All return parameters from API are in UTF-8 code unless specific description given. Signature Verification # All signatures to request API are in this form unless specific description given. Signature method for requesting API parameters: Step 1: Sort all parameters in ascending order according to parameter names Parameter list: abc=value1 bcd=value2 bad=value3 Sort result: abc=value1 bad=value3 bcd=value2 Step 2: Connect all parameters with ' ',and get the string to be signed abc=value1 bad=value3 bcd=value2 Step 3: Combine the string with Key from developer. abc=value1 bad=value3 bcd=value2 Key Step 4: MD5 Operate the combined string. MD5(abc=value1 bad=value3 bcd=value2 Key ) Step 5: Request API with the signature。 Save the signature in X-QF-SIGN in the http header field Python sample for signature requesting import hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # request signature data as data dictionary def make_req_sign(data, key): keys = data.keys() keys.sort() p = [] for k in keys: k = unicode_to_utf8(k) v = unicode_to_utf8(data[k]) p.append('%s=%s'%(k,v)) unsign_str = ' '.join(p) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() Request Description # Required parameter settings in HTTP header field to request API: Field Required Description X-QF-APPCODE Y app_code: the only marking assigned to developers by QFPAY. X-QF-SIGN Y signature : following the signature algorithm Response Description # Note : after successfully requested, API will return information in JSON form. This is for developers to obtain API return parameters and verify the signature of the return information. Parameters of the return HTTP header field: Field Description X-QF-SIGN Obtain the SIGN string of http header field. Combine KEY with the original return parameters, then do it with MD5 algorithm MD5(body+key) to get the signature, then check if it is same as the content of SIGN string. Header field SIGN sample: { 'Server': 'nginx', 'Date': 'Fri, 12 Jan 2018 11: 31: 18 GMT', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '302', 'Connection': 'keep-alive', 'X-QF-SIGN': '1E2CE7C2A7F8F581C354A857182B7A31', 'X-Powered-By': 'QF/1.1' } Public return parameters: Parameter Description respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL Resperr Information Description pay_type Payment Type respmsg Debug Message Compare SIGN with the return parameter verified signature: MD5 content: { pay_type : 800108 , sysdtm : 2018-01-12 19: 31: 16 , cardcd : 2088802362210279 , txdtm : 2018-01-12 19: 31: 22 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 130145934788787530052 , syssn : 20180112000100020001662134 , respcd : 0000 } 615ED178BA524459976CE40FAB78000F MD5 result: 1E2CE7C2A7F8F581C354A857182B7A31 Asynchronous Notification # Note: Asynchronous Notification address is provided by the Channel system and QFPAY technical supports will set them up. Only one Asynchronous Notification address can be set up for each set of Code Key, but it can be modified. Successfully paid orders will return Asynchronous Notification results. Please call the query API to inquire since the Asynchronous Notification might be delayed because of external factors. We suggest to use query API in conjunction with the Asynchronous Notification. Asynchronous Notification only works with port 80 and 443 and doesn't work with custom port out of security concerns. Asynchronous Notification send rules: Provide the notification address to QFPAY technical support, who will configure it in the background system. QFPAY will POST the information to the notification address in JSON form after success order. Developer need to provide QFPAY with SUCCESS response string after receiving Asynchronous Notification and successful signature verification. QFPAY will send asynchronous notification in 2m, 10m, 10m, 60m, 2h, 6h, 15h if received other response except the SUCCESS string, and will stop sending notification when the SUCCESS string is received. Signature algorithm verification in Asynchronous notification: Step 1: Obtain the signature from the X-QF-SIGN field in http header Step 2: Combine the key with the original content in the Body of http response message, and get the string to be verified Step 3: MD5 Operate the string. Step 4: Compare the MD5 result with the signature of X-QF-SIGN to verify if they are identical, return SUCCESS as verify succeed if they are identical Python sample for signature verification: import hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # Signature response data: the entire content data string to be returned def make_resp_sign(data, key): unsign_str = unicode_to_utf8(data) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() Response parameters of asynchronous notification: Parameter Description notify_type Notification Type: payment / refund / close syssn Order Ticket Number out_trade_no External Order Number defined by developer pay_type Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) txdtm Time of order create; txamt Order payment amount,2 decimal places; respcd Return code of order, default is set to return all the status of order sysdtm Order time in system paydtm Time of order payment cancel Recall /refund mark Done normally: 0; recalled: 2; refunded: 3; cardcd openid parameter for WeChat/ Alipay user; goods_name Goods name or marking; status Code of payment status: 1: paid successfully; txcurrcd Currency: Hong Kong Dollar: HKD ; China Yuan: CNY; mchid Merchant ID; Sample of Asynchronous notification Return parameters : { status : 1 , sysdtm : 2017-12-28 13: 41: 47 , paydtm : 2017-12-28 13: 42: 20 , goods_name : , txcurrcd : CNY , mchid : XXxxxx , cancel : 0 , pay_type : 800207 , cardcd : oo3Lss1m9-eHSEyY2OGKzxFaRflY , txdtm : 2017-12-28 13: 41: 47 , txamt : 200 , out_trade_no : BO201712280117290001 , syssn : 20171228000300020044178249 , respcd : 0000 , goods_info : , notify_type : payment }", 
            "title": "Developer Instructions"
        }, 
        {
            "location": "developer/#developer-instructions", 
            "text": "", 
            "title": "Developer Instructions"
        }, 
        {
            "location": "developer/#environment-description", 
            "text": "There're two environments of QFPAY API Test environment: for testing with the code and key. Official environment: for business use. To test code and key without settlement. Please test with small amount. MCHID can be found in channel system. The channel system entrance will be provided to merchants after applying the formal code and key. Every channel has its unique code and key, sub-merchants can use the same code and key. API requesting URL: Test environment: https: //openapi-test.qfpay.com Formal environment: https://openapi.qfpay.com Support API list: API instruction: API address: API description Request method description Order Payment /trade/v1/payment Call payment API,for placing order or initiate payment Post or Get under Http( form submission) Order query /trade/v1/query Query order information,for success order Post or Get under Http Order refund /trade/v1/refund For refund Post under Http Order close /tarde/v1/close Close order Post under Http Encoding Description All return parameters from API are in UTF-8 code unless specific description given.", 
            "title": "Environment Description"
        }, 
        {
            "location": "developer/#signature-verification", 
            "text": "All signatures to request API are in this form unless specific description given. Signature method for requesting API parameters: Step 1: Sort all parameters in ascending order according to parameter names Parameter list: abc=value1 bcd=value2 bad=value3 Sort result: abc=value1 bad=value3 bcd=value2 Step 2: Connect all parameters with ' ',and get the string to be signed abc=value1 bad=value3 bcd=value2 Step 3: Combine the string with Key from developer. abc=value1 bad=value3 bcd=value2 Key Step 4: MD5 Operate the combined string. MD5(abc=value1 bad=value3 bcd=value2 Key ) Step 5: Request API with the signature。 Save the signature in X-QF-SIGN in the http header field Python sample for signature requesting import hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # request signature data as data dictionary def make_req_sign(data, key): keys = data.keys() keys.sort() p = [] for k in keys: k = unicode_to_utf8(k) v = unicode_to_utf8(data[k]) p.append('%s=%s'%(k,v)) unsign_str = ' '.join(p) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper()", 
            "title": "Signature Verification"
        }, 
        {
            "location": "developer/#request-description", 
            "text": "Required parameter settings in HTTP header field to request API: Field Required Description X-QF-APPCODE Y app_code: the only marking assigned to developers by QFPAY. X-QF-SIGN Y signature : following the signature algorithm", 
            "title": "Request Description"
        }, 
        {
            "location": "developer/#response-description", 
            "text": "Note : after successfully requested, API will return information in JSON form. This is for developers to obtain API return parameters and verify the signature of the return information. Parameters of the return HTTP header field: Field Description X-QF-SIGN Obtain the SIGN string of http header field. Combine KEY with the original return parameters, then do it with MD5 algorithm MD5(body+key) to get the signature, then check if it is same as the content of SIGN string. Header field SIGN sample: { 'Server': 'nginx', 'Date': 'Fri, 12 Jan 2018 11: 31: 18 GMT', 'Content-Type': 'application/json; charset=UTF-8', 'Content-Length': '302', 'Connection': 'keep-alive', 'X-QF-SIGN': '1E2CE7C2A7F8F581C354A857182B7A31', 'X-Powered-By': 'QF/1.1' } Public return parameters: Parameter Description respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL Resperr Information Description pay_type Payment Type respmsg Debug Message Compare SIGN with the return parameter verified signature: MD5 content: { pay_type : 800108 , sysdtm : 2018-01-12 19: 31: 16 , cardcd : 2088802362210279 , txdtm : 2018-01-12 19: 31: 22 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 130145934788787530052 , syssn : 20180112000100020001662134 , respcd : 0000 } 615ED178BA524459976CE40FAB78000F MD5 result: 1E2CE7C2A7F8F581C354A857182B7A31", 
            "title": "Response Description"
        }, 
        {
            "location": "developer/#asynchronous-notification", 
            "text": "Note: Asynchronous Notification address is provided by the Channel system and QFPAY technical supports will set them up. Only one Asynchronous Notification address can be set up for each set of Code Key, but it can be modified. Successfully paid orders will return Asynchronous Notification results. Please call the query API to inquire since the Asynchronous Notification might be delayed because of external factors. We suggest to use query API in conjunction with the Asynchronous Notification. Asynchronous Notification only works with port 80 and 443 and doesn't work with custom port out of security concerns. Asynchronous Notification send rules: Provide the notification address to QFPAY technical support, who will configure it in the background system. QFPAY will POST the information to the notification address in JSON form after success order. Developer need to provide QFPAY with SUCCESS response string after receiving Asynchronous Notification and successful signature verification. QFPAY will send asynchronous notification in 2m, 10m, 10m, 60m, 2h, 6h, 15h if received other response except the SUCCESS string, and will stop sending notification when the SUCCESS string is received. Signature algorithm verification in Asynchronous notification: Step 1: Obtain the signature from the X-QF-SIGN field in http header Step 2: Combine the key with the original content in the Body of http response message, and get the string to be verified Step 3: MD5 Operate the string. Step 4: Compare the MD5 result with the signature of X-QF-SIGN to verify if they are identical, return SUCCESS as verify succeed if they are identical Python sample for signature verification: import hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # Signature response data: the entire content data string to be returned def make_resp_sign(data, key): unsign_str = unicode_to_utf8(data) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() Response parameters of asynchronous notification: Parameter Description notify_type Notification Type: payment / refund / close syssn Order Ticket Number out_trade_no External Order Number defined by developer pay_type Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) txdtm Time of order create; txamt Order payment amount,2 decimal places; respcd Return code of order, default is set to return all the status of order sysdtm Order time in system paydtm Time of order payment cancel Recall /refund mark Done normally: 0; recalled: 2; refunded: 3; cardcd openid parameter for WeChat/ Alipay user; goods_name Goods name or marking; status Code of payment status: 1: paid successfully; txcurrcd Currency: Hong Kong Dollar: HKD ; China Yuan: CNY; mchid Merchant ID; Sample of Asynchronous notification Return parameters : { status : 1 , sysdtm : 2017-12-28 13: 41: 47 , paydtm : 2017-12-28 13: 42: 20 , goods_name : , txcurrcd : CNY , mchid : XXxxxx , cancel : 0 , pay_type : 800207 , cardcd : oo3Lss1m9-eHSEyY2OGKzxFaRflY , txdtm : 2017-12-28 13: 41: 47 , txamt : 200 , out_trade_no : BO201712280117290001 , syssn : 20171228000300020044178249 , respcd : 0000 , goods_info : , notify_type : payment }", 
            "title": "Asynchronous Notification"
        }, 
        {
            "location": "scancode/", 
            "text": "QR Code | WECHAT / ALIPAY (including WAP) # Scene description: System will generate QR code for customer to scan after the customers' paying method (WeChat or Alipay)and amount are known, customer scan the QR code of fixed amount to pay. The QR code only be effective for 30 minute and one payment, then it will be invalid Request Payment API # Basic request information: Request method Post under Http Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameters Required Description txamt Y Order payment amount,2 decimal places txcurrcd Y Currency Hongkong Dollar: HKD ; China Yuan: CNY; Japan Yen: JPY; US Dollar: USD; Dirham: AED; Thai Baht: THB; pay_type Y Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) Alipay Hongkong Wap pay: 801512 ; Alipay Hongkong QR Pay: 801501 ; Alipay aboard Wap Pay: 801107 ; Alipay aboard QR Pay: 801101 ; LINE PAY: 801307 ;UNIONPAY: 800701 ; out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Order time: YYYY-MM-DD HH:MM:SS (format). goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. pay_tag N This parameter is a pay mark that supports Mainland wallet cross-border payment. It is required when doing Alipay HK payment, and set field Value as ALIPAYHK or ALIPYCN,ALIPAYHK means Alipay HK wallet payment. ALIPYCN means Mainland wallet aboard payment, field default value is ALIPAYHK. mchid N Merchant ID, identification for merchant, assigned by QFPAY(to distinguish the different merchants' order in channel system). txzone N Time zone,to record the domestic order time, default time zone is Beijing time+0800 return_url N Asynchronous notification address when order paid successfully limit_pay N Used to limit credit card transaction udid N Unique device id , length limited at 40 bytes Python request sample: #!/usr/bin/env python #coding=utf8 import urllib, urllib2, hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # request signature data as data dictionary def make_req_sign(data, key): keys = data.keys() keys.sort() p = [] for k in keys: k = unicode_to_utf8(k) v = unicode_to_utf8(data[k]) p.append('%s=%s'%(k,v)) unsign_str = ' '.join(p) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() txamt = '1' txcurrcd = 'CNY' pay_type = '800201' out_trade_no = '145399626053599943' txdtm = '2016-04-11 17: 51: 00' goods_name = 'test' limit_pay = 'no_credit' udid = '1880105' key = ' app_key assigned by QFPAY' data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name,'limit_pay': limit_pay,'udid': udid} req = urllib2.Request('https: //openapi-test.qfpay.com/trade/v1/payment',urllib.urlencode(data)) req.add_header('X-QF-APPCODE', 'app_code assigned by QFPAY ') req.add_header('X-QF-SIGN', make_req_sign(data, key)) resp = urllib2.urlopen(req) print resp.read() Response parameters: Parameters Description pay_type Pay type WeChat QR Pay: 800201; Alipay QR Pay: 800101 sysdtm System time txdtm Order time Form: YYYY-MM-DD HH: MM: SS resperr Response description txamt Order payment amount,2 decimal places respmsg Debug information out_trade_no External Order number,developer platform order number, syssn Order number on QFPAY side qrcode Return after order initiate successfully, need to be transferred to QR code form by merchant respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL Note : this request result is only order result, merchant should transfer the returned parameter qrcode to QR code form for customer to scan to do payment Response sample: { pay_type : 800201 , sysdtm : 2018-01-12 17: 38: 50 , cardcd : , txdtm : 2018-01-12 17: 38: 56 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 13014597457448787530052 , syssn : 20180112000100020001659801 , qrcode : weixin: //wxpay/bizpayurl?pr=hBvNxhc , respcd : 0000 } Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "QR Code WECHAT ALIPAY"
        }, 
        {
            "location": "scancode/#qr-code-124-wechat-alipay-including-wap", 
            "text": "Scene description: System will generate QR code for customer to scan after the customers' paying method (WeChat or Alipay)and amount are known, customer scan the QR code of fixed amount to pay. The QR code only be effective for 30 minute and one payment, then it will be invalid", 
            "title": "QR Code | WECHAT / ALIPAY (including WAP)"
        }, 
        {
            "location": "scancode/#request-payment-api", 
            "text": "Basic request information: Request method Post under Http Request address /trade/v1/payment Description Initiate order payment API Request parameters: Parameters Required Description txamt Y Order payment amount,2 decimal places txcurrcd Y Currency Hongkong Dollar: HKD ; China Yuan: CNY; Japan Yen: JPY; US Dollar: USD; Dirham: AED; Thai Baht: THB; pay_type Y Payment Type: 800101 (Alipay QR Code) / 800108 (Alipay Card) / 800107 (Alipay Service Window) / 800201 (WeChat QR Code) / 800208 (WeChat Card) / 800207 (WeChat Official Account) Alipay Hongkong Wap pay: 801512 ; Alipay Hongkong QR Pay: 801501 ; Alipay aboard Wap Pay: 801107 ; Alipay aboard QR Pay: 801101 ; LINE PAY: 801307 ;UNIONPAY: 800701 ; out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Order time: YYYY-MM-DD HH:MM:SS (format). goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. pay_tag N This parameter is a pay mark that supports Mainland wallet cross-border payment. It is required when doing Alipay HK payment, and set field Value as ALIPAYHK or ALIPYCN,ALIPAYHK means Alipay HK wallet payment. ALIPYCN means Mainland wallet aboard payment, field default value is ALIPAYHK. mchid N Merchant ID, identification for merchant, assigned by QFPAY(to distinguish the different merchants' order in channel system). txzone N Time zone,to record the domestic order time, default time zone is Beijing time+0800 return_url N Asynchronous notification address when order paid successfully limit_pay N Used to limit credit card transaction udid N Unique device id , length limited at 40 bytes Python request sample: #!/usr/bin/env python #coding=utf8 import urllib, urllib2, hashlib unicode_to_utf8 = lambda s: s.encode('utf-8') if isinstance(s, unicode) else s # request signature data as data dictionary def make_req_sign(data, key): keys = data.keys() keys.sort() p = [] for k in keys: k = unicode_to_utf8(k) v = unicode_to_utf8(data[k]) p.append('%s=%s'%(k,v)) unsign_str = ' '.join(p) + unicode_to_utf8(key) s = hashlib.md5(unsign_str).hexdigest() return s.upper() txamt = '1' txcurrcd = 'CNY' pay_type = '800201' out_trade_no = '145399626053599943' txdtm = '2016-04-11 17: 51: 00' goods_name = 'test' limit_pay = 'no_credit' udid = '1880105' key = ' app_key assigned by QFPAY' data ={'txamt': txamt, 'txcurrcd': txcurrcd, 'pay_type': pay_type, 'out_trade_no': out_trade_no, 'txdtm': txdtm, 'goods_name': goods_name,'limit_pay': limit_pay,'udid': udid} req = urllib2.Request('https: //openapi-test.qfpay.com/trade/v1/payment',urllib.urlencode(data)) req.add_header('X-QF-APPCODE', 'app_code assigned by QFPAY ') req.add_header('X-QF-SIGN', make_req_sign(data, key)) resp = urllib2.urlopen(req) print resp.read() Response parameters: Parameters Description pay_type Pay type WeChat QR Pay: 800201; Alipay QR Pay: 800101 sysdtm System time txdtm Order time Form: YYYY-MM-DD HH: MM: SS resperr Response description txamt Order payment amount,2 decimal places respmsg Debug information out_trade_no External Order number,developer platform order number, syssn Order number on QFPAY side qrcode Return after order initiate successfully, need to be transferred to QR code form by merchant respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL Note : this request result is only order result, merchant should transfer the returned parameter qrcode to QR code form for customer to scan to do payment Response sample: { pay_type : 800201 , sysdtm : 2018-01-12 17: 38: 50 , cardcd : , txdtm : 2018-01-12 17: 38: 56 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 13014597457448787530052 , syssn : 20180112000100020001659801 , qrcode : weixin: //wxpay/bizpayurl?pr=hBvNxhc , respcd : 0000 } Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Request Payment API"
        }, 
        {
            "location": "wechat-account/", 
            "text": "Official Account | WECHAT # Scenario : only supports H5 mobile web page in WeChat environment in this scenario and doesn't support WeChat Official Account page. Merchant should use real name registration if they require customer to make payment inside the Official Account page (please refer to Real name registered Official Account pay for this payment process). Payment is allowed in Official Account after real name is registered. Obtain OAuth Code # Basic request information: Request type Get under HTTP Request address /tool/v1/get_weixin_oauth_code Description obtain code from oauth in WeChat, put the app_code and sign in the parameter get instead of HTTP header, merchant should call this URL in WeChat environment. Request parameters: Parameter Required Description app_code Y Developer identification code,string app_code assigned by QFPAY. redirect_uri Y Redirect URL, will redirect to this address and obtain code from the parameter get in the address. The address keeps on record, only do encode during request. mchid Y Merchant ID, identification for merchant, assigned by QFPAY (to distinguish the different merchants' order in channel system). sign Y Signature obtained by unified signature type. Request sample: https://openapi-test.qfpay.com/tool/v1/get_weixin_oauth_code?app_code=4A7D18AF8496425193E510DEC8E9526F redirect_uri=http://test.qfpay.com/get_code7 mchid=ZKWjSzbb sign=3F4EED65F68FD5FA0C0AE5794A3AB6D9 Obtain OpenID # Note : follow the process to obtain oauth_code of WeChat and obtain OpenID every time payment is called. Basic request information: Request type Get under Http Request address /tool/v1/get_weixin_openid Description :Obtain openid,should put X-QF-APPCODE and X-QF-SIGN in http header Request parameters: parameter Required Description code Y Code obtained before getting oauth_code , cannot use repeatedly mchid Y Merchant ID, identification for merchant,assigned by QFPAY(can be seen in channel system). Response parameters: Parameters Description openid openid of WeChat,different from other merchants' openid Request Payment API # Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Initiate payment API Request parameters: Parameter Required Description txamt Y Transaction Amount txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB pay_type Y Payment Type: 800207 (WeChat Official Account) out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. sub_openid Y WeChat OpenID: Obtained during the process above. goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8 return_url N Asynchronous notification address when order paid successfully limit_pay N Used to limit credit card transaction udid N Unique device id Response parameters: Parameter Description pay_type Payment Type: 800207 (WeChat Official Account) sysdtm System Time. txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). resperr Response Error: Error description. txcurrcd Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY. txamt Order payment amount, 2 decimal places. respmsg Response Message: Used for debugging. out_trade_no External Order Number / Developer Platform Order Number. syssn Order Number: QFPAY generated. respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL pay_params Payment Parameters: initiates WeChat Pay, please refer to the below response sample. Response sample { pay_type : 800207 , sysdtm : 2018-01-15 10: 45: 44 , cardcd : , txdtm : 2018-01-15 10: 45: 43 , resperr : \\u4ea4\\u6613\\u6210\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 13054541930052 , syssn : 20180115000100020001689938 , respcd : 0000 , pay_params : { package : prepay_id=wx20180115104545871fa226d10608087535 , timeStamp : 1515984345463 , signType : MD5 , paySign : E75ED8747CFB0F00DEDBD97FB8D92E9E , appId : wx290ce4878c94369d , nonceStr : 1515984345463 } } Call WeChat Pay # pay_params field of return parameters: { package : prepay_id=wx20180115104545871fa226d10608087535 , timeStamp : 1515984345463 , signType : MD5 , paySign : E75ED8747CFB0F00DEDBD97FB8D92E9E , appId : wx290ce4878c94369d , nonceStr : 1515984345463 } Go to payment page Note : directly get the related parameter to the page, no need to define X-QF-APPCODE or X-QF-SIGN in http header during this step Basic request information: Request address https: //o2.qfpay.com/q/direct Description get the parameter to this appointed page and finish payment after obtained the payment parameters Request parameters: Parameter Required Description mchntnm Y Custom goods name, need to urlencode this parameter if it's in Chinese txamt Y Amount goods_name Y Custom goods name, need to urlencode this parameter if it's in Chinese redirect_url Y Redirect address after Payment, ( urlencode this parameter) package Y Parameter return from WeChat after calling payment API timeStamp Y Parameter return from WeChat after calling payment API signType Y Parameter return from WeChat after calling payment API paySign Y Parameter return from WeChat after calling payment API( urlencode this parameter) appId Y Parameter return from WeChat after calling payment API nonceStr Y Parameter return from WeChat after calling payment API Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port. Official Account Real Name Registration # Initiate payment is allowed in real name registered Official Account after finished QFPAY real name registration and works, and the paying process will be different from Official Account pay developer should obtain openid from WeChat, please refer to the document provided by WeChat: http: //mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html request the QFPAY order payment API /trade/v1/payment with the obtained openid , please refer to the process of request payment API in WeChat Official Account pay, and obtain information in the returned pay_params initiate collection on the page of JSAPI payment authorization cast during real name registration instead of the QFPAY appointed(https: //o2.qfpay.com/q/direct)to call WeChat Pay. Please refer to the document provided by WeChat: https: //pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7 index=6", 
            "title": "Official Account WECHAT"
        }, 
        {
            "location": "wechat-account/#official-account-124-wechat", 
            "text": "Scenario : only supports H5 mobile web page in WeChat environment in this scenario and doesn't support WeChat Official Account page. Merchant should use real name registration if they require customer to make payment inside the Official Account page (please refer to Real name registered Official Account pay for this payment process). Payment is allowed in Official Account after real name is registered.", 
            "title": "Official Account | WECHAT"
        }, 
        {
            "location": "wechat-account/#obtain-oauth-code", 
            "text": "Basic request information: Request type Get under HTTP Request address /tool/v1/get_weixin_oauth_code Description obtain code from oauth in WeChat, put the app_code and sign in the parameter get instead of HTTP header, merchant should call this URL in WeChat environment. Request parameters: Parameter Required Description app_code Y Developer identification code,string app_code assigned by QFPAY. redirect_uri Y Redirect URL, will redirect to this address and obtain code from the parameter get in the address. The address keeps on record, only do encode during request. mchid Y Merchant ID, identification for merchant, assigned by QFPAY (to distinguish the different merchants' order in channel system). sign Y Signature obtained by unified signature type. Request sample: https://openapi-test.qfpay.com/tool/v1/get_weixin_oauth_code?app_code=4A7D18AF8496425193E510DEC8E9526F redirect_uri=http://test.qfpay.com/get_code7 mchid=ZKWjSzbb sign=3F4EED65F68FD5FA0C0AE5794A3AB6D9", 
            "title": "Obtain OAuth Code"
        }, 
        {
            "location": "wechat-account/#obtain-openid", 
            "text": "Note : follow the process to obtain oauth_code of WeChat and obtain OpenID every time payment is called. Basic request information: Request type Get under Http Request address /tool/v1/get_weixin_openid Description :Obtain openid,should put X-QF-APPCODE and X-QF-SIGN in http header Request parameters: parameter Required Description code Y Code obtained before getting oauth_code , cannot use repeatedly mchid Y Merchant ID, identification for merchant,assigned by QFPAY(can be seen in channel system). Response parameters: Parameters Description openid openid of WeChat,different from other merchants' openid", 
            "title": "Obtain OpenID"
        }, 
        {
            "location": "wechat-account/#request-payment-api", 
            "text": "Basic request information: Request method Post under HTTP Request address /trade/v1/payment Description Initiate payment API Request parameters: Parameter Required Description txamt Y Transaction Amount txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB pay_type Y Payment Type: 800207 (WeChat Official Account) out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. sub_openid Y WeChat OpenID: Obtained during the process above. goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8 return_url N Asynchronous notification address when order paid successfully limit_pay N Used to limit credit card transaction udid N Unique device id Response parameters: Parameter Description pay_type Payment Type: 800207 (WeChat Official Account) sysdtm System Time. txdtm Transaction Time: YYYY-MM-DD HH:MM:SS (format). resperr Response Error: Error description. txcurrcd Transaction Currency: Hong Kong Dollar: HKD / Chinese Yuan: CNY. txamt Order payment amount, 2 decimal places. respmsg Response Message: Used for debugging. out_trade_no External Order Number / Developer Platform Order Number. syssn Order Number: QFPAY generated. respcd Response Code: Code generated from order request. 0000 : SUCCESS / 1143 : IN PROGRESS / 1145 : IN PROGRESS / (any others): FAIL pay_params Payment Parameters: initiates WeChat Pay, please refer to the below response sample. Response sample { pay_type : 800207 , sysdtm : 2018-01-15 10: 45: 44 , cardcd : , txdtm : 2018-01-15 10: 45: 43 , resperr : \\u4ea4\\u6613\\u6210\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 13054541930052 , syssn : 20180115000100020001689938 , respcd : 0000 , pay_params : { package : prepay_id=wx20180115104545871fa226d10608087535 , timeStamp : 1515984345463 , signType : MD5 , paySign : E75ED8747CFB0F00DEDBD97FB8D92E9E , appId : wx290ce4878c94369d , nonceStr : 1515984345463 } }", 
            "title": "Request Payment API"
        }, 
        {
            "location": "wechat-account/#call-wechat-pay", 
            "text": "pay_params field of return parameters: { package : prepay_id=wx20180115104545871fa226d10608087535 , timeStamp : 1515984345463 , signType : MD5 , paySign : E75ED8747CFB0F00DEDBD97FB8D92E9E , appId : wx290ce4878c94369d , nonceStr : 1515984345463 } Go to payment page Note : directly get the related parameter to the page, no need to define X-QF-APPCODE or X-QF-SIGN in http header during this step Basic request information: Request address https: //o2.qfpay.com/q/direct Description get the parameter to this appointed page and finish payment after obtained the payment parameters Request parameters: Parameter Required Description mchntnm Y Custom goods name, need to urlencode this parameter if it's in Chinese txamt Y Amount goods_name Y Custom goods name, need to urlencode this parameter if it's in Chinese redirect_url Y Redirect address after Payment, ( urlencode this parameter) package Y Parameter return from WeChat after calling payment API timeStamp Y Parameter return from WeChat after calling payment API signType Y Parameter return from WeChat after calling payment API paySign Y Parameter return from WeChat after calling payment API( urlencode this parameter) appId Y Parameter return from WeChat after calling payment API nonceStr Y Parameter return from WeChat after calling payment API Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Call WeChat Pay"
        }, 
        {
            "location": "wechat-account/#official-account-real-name-registration", 
            "text": "Initiate payment is allowed in real name registered Official Account after finished QFPAY real name registration and works, and the paying process will be different from Official Account pay developer should obtain openid from WeChat, please refer to the document provided by WeChat: http: //mp.weixin.qq.com/wiki/17/c0f37d5704f0b64713d5d2c37b468d75.html request the QFPAY order payment API /trade/v1/payment with the obtained openid , please refer to the process of request payment API in WeChat Official Account pay, and obtain information in the returned pay_params initiate collection on the page of JSAPI payment authorization cast during real name registration instead of the QFPAY appointed(https: //o2.qfpay.com/q/direct)to call WeChat Pay. Please refer to the document provided by WeChat: https: //pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7 index=6", 
            "title": "Official Account Real Name Registration"
        }, 
        {
            "location": "wechat-mini/", 
            "text": "Applet | WECHAT # Scenario: Merchant already has a WeChat Applet and needs to call WeChat Pay to finish payment in the Applet. Applet Real Name Registration # Merchant needs to contact QFPAY to finish the Applet real name registration before using WeChat Applet Pay. Note : merchant can only call payment with the real name registered under Applet. Obtain OpenID # For details on how the Merchant obtains openid with the Applet after real name takes effect, please refer to: https: //mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html?t=20161122 Request Payment API # Basic Request information: Request method Post under HTTP Request address /trade/v1/payment Description Call the payment API Request Parameters: Parameter Required Description txamt Y Transaction Amount. txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB. pay_type Y Payment Type: 800213 (WeChat Applet Pay). out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). sub_openid Y OpenID of WeChat Mini-Program Pay, obtained during the former process. goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system. txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. return_url N Asynchronous notification address when order paid successfully. limit_pay N Use to limit credit card transaction udid N Unique device id Response sample { pay_type : 800213 , sysdtm : 2018-02-01 18: 40: 18 , cardcd : , txdtm : 2018-02-01 18: 40: 18 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 20180201184018100000326 , syssn : 20180201000100020001881791 , respcd : 0000 , pay_params : { package : prepay_id=wx201802011840185d43f609cb0985252573 , timeStamp : 1517481618 , signType : MD5 , paySign : 5AB862AFB08B2545C7EE781C15408031 , appId : wx8f888cc1127fe645 , nonceStr : 56d07134614d4f55b18afeca6addd60d } } Call Applet Pay # Applet payment can be called after obtaining the above parameters. Please refer to: https: //pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7 index=5 Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Applet WECHAT"
        }, 
        {
            "location": "wechat-mini/#applet-124-wechat", 
            "text": "Scenario: Merchant already has a WeChat Applet and needs to call WeChat Pay to finish payment in the Applet.", 
            "title": "Applet | WECHAT"
        }, 
        {
            "location": "wechat-mini/#applet-real-name-registration", 
            "text": "Merchant needs to contact QFPAY to finish the Applet real name registration before using WeChat Applet Pay. Note : merchant can only call payment with the real name registered under Applet.", 
            "title": "Applet Real Name Registration"
        }, 
        {
            "location": "wechat-mini/#obtain-openid", 
            "text": "For details on how the Merchant obtains openid with the Applet after real name takes effect, please refer to: https: //mp.weixin.qq.com/debug/wxadoc/dev/api/api-login.html?t=20161122", 
            "title": "Obtain OpenID"
        }, 
        {
            "location": "wechat-mini/#request-payment-api", 
            "text": "Basic Request information: Request method Post under HTTP Request address /trade/v1/payment Description Call the payment API Request Parameters: Parameter Required Description txamt Y Transaction Amount. txcurrcd Y Transaction Currency: Hong Kong Dollar: HKD / China Yuan: CNY / Japanese Yen: JPY / US Dollar: USD / UAE Dirham: AED / Thai Baht: THB. pay_type Y Payment Type: 800213 (WeChat Applet Pay). out_trade_no Y External Order Number / Developer Platform Order Number: This parameter cannot be used repeatedly to call payment (refund) API and make an order under the same MCHID. To ensure the trade number is unique, length is limited to 128 bytes. txdtm Y Transaction Time: YYYY-MM-DD HH:MM:SS (format). sub_openid Y OpenID of WeChat Mini-Program Pay, obtained during the former process. goods_name Y Goods Name / Marking: Cannot exceed 20 alphanumeric or contain special characters. mchid Y Merchant ID: identification for merchant, assigned by QFPAY to distinguish the different merchants' order in channel system. txzone N Transaction Time zone: record of the order in local time, default time zone is Beijing time UTC+8. return_url N Asynchronous notification address when order paid successfully. limit_pay N Use to limit credit card transaction udid N Unique device id Response sample { pay_type : 800213 , sysdtm : 2018-02-01 18: 40: 18 , cardcd : , txdtm : 2018-02-01 18: 40: 18 , resperr : \\\\u4ea4\\\\u6613\\\\u6210\\\\u529f , txcurrcd : CNY , txamt : 1 , respmsg : , out_trade_no : 20180201184018100000326 , syssn : 20180201000100020001881791 , respcd : 0000 , pay_params : { package : prepay_id=wx201802011840185d43f609cb0985252573 , timeStamp : 1517481618 , signType : MD5 , paySign : 5AB862AFB08B2545C7EE781C15408031 , appId : wx8f888cc1127fe645 , nonceStr : 56d07134614d4f55b18afeca6addd60d } }", 
            "title": "Request Payment API"
        }, 
        {
            "location": "wechat-mini/#call-applet-pay", 
            "text": "Applet payment can be called after obtaining the above parameters. Please refer to: https: //pay.weixin.qq.com/wiki/doc/api/wxa/wxa_api.php?chapter=7_7 index=5 Receive Asynchronous notification after successful payment Note: please call the query API to inquire because the Asynchronous notification might be delayed because of external factors, we suggest to use query API together with the asynchronous notification. for safety consideration, asynchronous notification only work with port 80 and 443 and doesn't work with custom port.", 
            "title": "Call Applet Pay"
        }
    ]
}